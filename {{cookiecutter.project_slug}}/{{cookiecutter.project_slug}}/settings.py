"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import logging
import logging.config
import os
from pathlib import Path

import environ
from dotenv import dotenv_values

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENV_DIR = BASE_DIR / "env"

ENV_DIR.mkdir(exist_ok=True)

DOTENV = BASE_DIR / ".env"

BASE_DOTENV = ENV_DIR / ".env.base"

PROJECT_ENV_KEY = "PROJECT_ENV"

PROJECT_ENV = os.environ.get(PROJECT_ENV_KEY, "local")


def merge_env():
    """Merge dotenv values"""
    base = {**dotenv_values(BASE_DOTENV)}

    current_env = ENV_DIR / f".env.{PROJECT_ENV}"

    if current_env.exists():
        base.update(dotenv_values(current_env))
    DOTENV.touch()
    DOTENV.write_text("\n".join([f"{k}={v}" for k, v in base.items()]))


merge_env()
env = environ.Env()
environ.Env.read_env(DOTENV)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = env.list("ALLOW_HOSTS")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    {%- if cookiecutter.add_example_app %}
    "example_app",
    {%- endif %}
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "base.middleware.JsonMiddleware",
]

ROOT_URLCONF = "{{cookiecutter.project_slug}}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "{{cookiecutter.project_slug}}.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {"default": env.db_url()}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = env.str("LANGUAGE_CODE")
USE_I18N = env.bool("USE_I18N")
TIME_ZONE = env.str("TIME_ZONE")
USE_TZ = env.bool("USE_TZ")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOG_DIR = BASE_DIR / env.str("LOG_DIR", "logs")

LOG_DIR.mkdir(exist_ok=True)

LOG_FILE = LOG_DIR / env.str("LOG_FILE", "access.log")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "rich.logging.RichHandler",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_FILE),
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
        },
    },
    "loggers": {

        "default": {
            "handlers": ["console", "file"],
            "propagate": True,
            "level": "DEBUG" if DEBUG else "INFO",
        }
    },
}

logging.config.dictConfig(LOGGING)


DJANGO_REST = {
    "RESPONSE_DATA_FIELD": "data",
    "RESPONSE_MESSAGE_FIELD": "msg",
    "RESPONSE_CODE_FIELD": "code",
    "RESPONSE_PAGINATED_LIST_FIELD": "list",
    "RESPONSE_PAGINATED_COUNT_FIELD": "count",
}
